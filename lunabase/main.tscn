[gd_scene load_steps=41 format=3 uid="uid://b8qgudi6vkflb"]

[ext_resource type="Texture2D" uid="uid://d4it3tpx2xqxq" path="res://icon.png" id="1_1xyvq"]
[ext_resource type="AudioStream" uid="uid://dpp0287wnfjsc" path="res://addons/kenney_interface_sounds/confirmation_002.wav" id="1_hl7kb"]
[ext_resource type="PackedScene" uid="uid://s8kxwa7b8f1t" path="res://ray_scanner.tscn" id="2_jsa7e"]
[ext_resource type="AudioStream" uid="uid://cephremnedhtp" path="res://addons/kenney_interface_sounds/error_002.wav" id="2_kejy0"]
[ext_resource type="PackedScene" uid="uid://br8rl5vykae1n" path="res://boulder.tscn" id="3_02f7a"]
[ext_resource type="PackedScene" uid="uid://c5hn62wsy0afm" path="res://waypoint.tscn" id="3_b4xjj"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_f0mli"]

[sub_resource type="GDScript" id="GDScript_45865"]
script/source = "extends Control


var connected := false


func _ready() -> void:
	Lunabot.connected.connect(func(): connected = true)
	Lunabot.disconnected.connect(func(): connected = false)
	Lunabot.connected.connect($Connected.play)
	Lunabot.disconnected.connect($Disconnected.play)


func _input(event: InputEvent) -> void:
	if event is InputEventJoypadMotion:
		if !connected:
			return
		Lunabot.send_steering(
			Input.get_action_strength(\"DriveForward\") - Input.get_action_strength(\"DriveBackward\"),
			Input.get_action_strength(\"SteerRight\") - Input.get_action_strength(\"SteerLeft\")
		)
		Lunabot.send_arm_controls(
			Input.get_action_strength(\"MoveArmUp\") - Input.get_action_strength(\"MoveArmDown\"),
			Input.get_action_strength(\"SpinDrumClockwise\") - Input.get_action_strength(\"SpinDrumCounterClockwise\")
		)
	
	elif event.is_action_pressed(\"Restart\"):
		get_tree().change_scene_to_file(scene_file_path)
"

[sub_resource type="GDScript" id="GDScript_wemvy"]
script/source = "extends Label


func _ready() -> void:
	Lunabot.disconnected.connect(func():
		text = \"Not Connected\"
	)
	Lunabot.network_statistics.connect(
		func(total_bytes: float, ping: int, packet_loss: float, packet_throttle: float):
			text = \"\"\"Total Bytes: %s
Ping: %s
Packet Loss: %s
Packet Throttle: %s\"\"\" % [total_bytes, ping, roundi(packet_loss * 100), roundi(packet_throttle * 100)]
	)
"

[sub_resource type="GDScript" id="GDScript_yu1su"]
script/source = "extends Label


const TOO_LONG := 3.0

var timer := 0.0


func _ready() -> void:
	Lunabot.something_received.connect(func():
		timer = 0
	)


func _process(delta: float) -> void:
	timer += delta
	if timer > 10:
		text = \"Last Received: 10000+ ms\"
	else:
		text = \"Last Received: %s ms\" % [roundi(timer * 1000)]
	var strength := minf(timer, TOO_LONG) / TOO_LONG
	modulate.g = 1.0 - strength
	modulate.r = strength
"

[sub_resource type="GDScript" id="GDScript_67ds2"]
script/source = "extends TextureRect


signal image_received(Image)
signal ffmpeg_thr_finished


const IMAGE_WIDTH := 1280
const IMAGE_HEIGHT := 720
const IMAGE_SIZE := IMAGE_WIDTH * IMAGE_HEIGHT * 3

var texture_rects: Array = []

var ffmpeg_thr: Thread
var udp_thr := Thread.new()


func _ready() -> void:
	texture = ImageTexture.create_from_image(Image.create(IMAGE_WIDTH, IMAGE_HEIGHT, false, Image.FORMAT_RGB8))
	
	Lunabot.camera_sdp_received.connect(
		func(sdp: String):
			if ffmpeg_thr != null:
				return
			ffmpeg_thr = Thread.new()
			var sdp_file := FileAccess.open(\"camera.sdp\", FileAccess.WRITE)
			sdp_file.store_string(sdp)
			sdp_file.close()
			
			ffmpeg_thr.start(
				func():
					var output := []
					var err := OS.execute(\"ffmpeg\", [\"-protocol_whitelist\", '\"file,rtp,udp\"', \"-i\", \"camera.sdp\", \"-strict\", \"2\", \"-f\", \"rawvideo\", \"-pix_fmt\", \"rgb24\", \"tcp://127.0.0.1:%s\" % (Lunabot.RECV_FROM + 3)], output, false, true)
					##OS.create_process(\"ffmpeg\", [\"-protocol_whitelist\", '\"file,rtp,udp\"', \"-i\", \"camera.sdp\", \"-strict\", \"2\", \"-y\", \"output.mkv\"], true)
					for line in output:
						print(line)
					print(\"Error code %s\" % err)
					call_deferred(\"emit_signal\", \"ffmpeg_thr_finished\")
			)
			
			await ffmpeg_thr_finished
			ffmpeg_thr.wait_to_finish()
			ffmpeg_thr = null
			Lunabot.raw_send_reliable(Lunabot.Channels.CAMERA, [1])
	)
	
	udp_thr.start(
		func():
			var tcp_server := TCPServer.new()
			while true:
				var err := tcp_server.listen(Lunabot.RECV_FROM + 3)
				if err == ERR_FILE_EOF:
					continue
				if err != 0:
					push_error(\"Faced the following error while binding cam tcp: %s\" % err)
					OS.delay_msec(2000)
					continue
				
				while not tcp_server.is_connection_available():
					OS.delay_msec(20)
				
				var cam_tcp := tcp_server.take_connection()
				tcp_server.stop()
				
				while true:
					var result := cam_tcp.get_data(IMAGE_SIZE)
					if result[0] != 0:
						push_error(\"Faced the following error while reading cam tcp: %s\" % result[0])
						break
					call_deferred(\"emit_signal\", \"image_received\", Image.create_from_data(IMAGE_WIDTH, IMAGE_HEIGHT, false, Image.FORMAT_RGB8, result[1])),
			
		Thread.PRIORITY_HIGH
	)
	
	image_received.connect(
		func(img: Image):
			texture.update(img)
	)
"

[sub_resource type="GDScript" id="GDScript_amk46"]
script/source = "extends Button


var camera_enabled := false


func _ready() -> void:
	Lunabot.connected.connect(func():
		disabled = false
	)
	Lunabot.disconnected.connect(func():
		disabled = true
	)


func _on_pressed() -> void:
	if camera_enabled:
		Lunabot.send_important_msg(Lunabot.ImportantMessage.DISABLE_CAMERA)
		camera_enabled = false
		text = \"Enable Camera\"
	else:
		Lunabot.send_important_msg(Lunabot.ImportantMessage.ENABLE_CAMERA)
		camera_enabled = true
		text = \"Disable Camera\"
"

[sub_resource type="Gradient" id="Gradient_j05cb"]
interpolation_mode = 2
offsets = PackedFloat32Array(0, 0.5, 1)
colors = PackedColorArray(1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_lspd7"]
gradient = SubResource("Gradient_j05cb")
fill_from = Vector2(1, 1)

[sub_resource type="GDScript" id="GDScript_aogjq"]
script/source = "extends TextureRect


var driving := false


func _ready() -> void:
	Lunabot.disconnected.connect(func():
		driving = false
		_update()
	)


func _gui_input(event: InputEvent) -> void:
	if !Lunabot.is_lunabot_connected():
		return
	
	if event is InputEventMouseButton:
		if event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
			driving = not driving
			_update()
			accept_event()
		
	elif event is InputEventMouseMotion:
		if !driving:
			return
		var origin := (get_local_mouse_position() / size - Vector2.ONE / 2) * 2
		Lunabot.send_steering(- origin.y, origin.x)
		accept_event()


func _on_mouse_exited() -> void:
	if !Lunabot.is_lunabot_connected() or !driving:
		return
	driving = false
	_update()


func _update() -> void:
	if driving:
		mouse_default_cursor_shape = Control.CURSOR_MOVE
		$CenterContainer/Label.text = \"Ã—\"
		warp_mouse(size / 2)
	else:
		mouse_default_cursor_shape = Control.CURSOR_ARROW
		$CenterContainer/Label.text = \"Click to Drive\"
		Lunabot.send_steering(0, 0)
"

[sub_resource type="GDScript" id="GDScript_ggpmf"]
script/source = "extends VBoxContainer


const DATA_STRIDE := 18

var data: PackedFloat32Array
var data_index := 0
var elapsed := 0.0
var target_elapsed := 0.0
var total_duration := 0.0

@onready var robot: Node3D = $AspectRatioContainer/SubViewportContainer/SubViewport/Robot


func _ready() -> void:
	$HBoxContainer2/HSlider.drag_started.connect(
		func():
			set_process(false)
	)
	$HBoxContainer2/HSlider.drag_ended.connect(
		func(value_changed: bool):
			set_process(true)
			if !value_changed:
				return
			elapsed = $HBoxContainer2/HSlider.value * total_duration
			if elapsed < target_elapsed:
				data_index = 0
				target_elapsed = 0
	)
	set_process(false)


func _on_open_file_pressed() -> void:
	var dialog := FileDialog.new()
	dialog.access = FileDialog.ACCESS_FILESYSTEM
	dialog.mode_overrides_title = false
	dialog.title = \"Select a data file to play\"
	dialog.add_filter(\"*.csv\", \"Comma Separated\")
	dialog.close_requested.connect(
		func():
			dialog.queue_free()
	)
	dialog.show_hidden_files = true
	dialog.file_mode = FileDialog.FILE_MODE_OPEN_FILE
	dialog.file_selected.connect(
		func(path: String):
			var file := FileAccess.open(path, FileAccess.READ)
			if file == null:
				push_error(\"Error code: %s while opening %s\" % [FileAccess.get_open_error(), path])
				return
			var path_segments := path.split(\"/\")
			$HBoxContainer/Label.text = path_segments[path_segments.size() - 1]
			$HBoxContainer2/HSlider.editable = true
			$HBoxContainer2/Play.disabled = false
			$HBoxContainer2/PlayTime.editable = true
			data.clear()
			total_duration = 0
			elapsed = 0
			data_index = 0
			
			while true:
				var line := file.get_csv_line()
				if line.size() == 1 and line[0] == \"\":
					break
				if !line[0].is_valid_float():
					continue
				for text in line:
					data.push_back(float(text))
				if data.size() > DATA_STRIDE:
					total_duration += data[data.size() - 1]
			
			target_elapsed = data[DATA_STRIDE * 2 - 1]
	)
	dialog.popup_exclusive_centered(self, Vector2i.ONE * 800)


func _on_play_toggled(button_pressed: bool) -> void:
	if button_pressed:
		$HBoxContainer2/Play.text = \"Stop\"
		set_process(true)
	else:
		$HBoxContainer2/Play.text = \"Play\"
		set_process(false)


func _process(delta: float) -> void:
	elapsed += delta
	while elapsed >= target_elapsed:
		robot.quaternion = Quaternion(data[data_index + DATA_STRIDE - 4], data[data_index + DATA_STRIDE - 3], data[data_index + DATA_STRIDE - 2], data[data_index + DATA_STRIDE - 5]).normalized()
		robot.position = Vector3(data[data_index + DATA_STRIDE - 8], data[data_index + DATA_STRIDE - 7], data[data_index + DATA_STRIDE - 6])
		data_index += DATA_STRIDE
		if data_index >= data.size():
			elapsed = 0
			data_index = 0
			target_elapsed = data[DATA_STRIDE * 2 - 1]
			break
		var data_delta := data[data_index + DATA_STRIDE - 1]
		target_elapsed += data_delta
		if data_delta > delta:
			break
	$HBoxContainer2/HSlider.value = elapsed / total_duration
	var mins := floori(elapsed / 60)
	var secs := floori(elapsed) % 60
	
	if !$HBoxContainer2/PlayTime.has_focus():
		if secs < 10:
			$HBoxContainer2/PlayTime.text = \"%s:0%s\" % [mins, secs]
		else:
			$HBoxContainer2/PlayTime.text = \"%s:%s\" % [mins, secs]
"

[sub_resource type="GDScript" id="GDScript_mnw3m"]
script/source = "extends SubViewportContainer


const MOUSE_SENSITIVITY := 0.75

var pressed := false


func _gui_input(event: InputEvent) -> void:
	if event is InputEventMouseMotion:
		if !pressed:
			return
		event.relative /= -Vector2(get_viewport().size)
		event.relative = Vector2(sqrt(absf(event.relative.x)), sqrt(absf(event.relative.y))) * event.relative.sign()
		event.relative *= MOUSE_SENSITIVITY
		$SubViewport/Node3D.global_rotate(Vector3.UP, event.relative.x)
		$SubViewport/Node3D.rotate_object_local(Vector3.RIGHT, event.relative.y)
	elif event is InputEventMouseButton:
		if event.button_index != MOUSE_BUTTON_LEFT:
			return
		pressed = event.pressed
"

[sub_resource type="Environment" id="Environment_bvywr"]
background_mode = 1
background_color = Color(0.00784314, 0.00784314, 0.00784314, 1)

[sub_resource type="World3D" id="World3D_pep74"]
environment = SubResource("Environment_bvywr")

[sub_resource type="BoxMesh" id="BoxMesh_0laka"]
size = Vector3(0.15, 0.15, 0.15)

[sub_resource type="PrismMesh" id="PrismMesh_8ty6s"]
size = Vector3(0.15, 0.15, 0.15)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_7fexe"]
albedo_color = Color(0.027451, 0.0235294, 0.0627451, 1)

[sub_resource type="PlaneMesh" id="PlaneMesh_hrbaw"]
material = SubResource("StandardMaterial3D_7fexe")
size = Vector2(20, 20)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_51jn0"]
shading_mode = 0
albedo_color = Color(0, 1, 0, 1)

[sub_resource type="CylinderMesh" id="CylinderMesh_ounod"]
material = SubResource("StandardMaterial3D_51jn0")
top_radius = 0.02
bottom_radius = 0.02
height = 0.1

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_hv5tc"]
shading_mode = 0
albedo_color = Color(1, 0, 0, 1)

[sub_resource type="CylinderMesh" id="CylinderMesh_7c1fb"]
material = SubResource("StandardMaterial3D_hv5tc")
top_radius = 0.02
bottom_radius = 0.02
height = 0.1

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_jlfhp"]
shading_mode = 0
albedo_color = Color(0, 0, 1, 1)

[sub_resource type="CylinderMesh" id="CylinderMesh_826py"]
material = SubResource("StandardMaterial3D_jlfhp")
top_radius = 0.02
bottom_radius = 0.02
height = 0.1

[sub_resource type="GDScript" id="GDScript_0y6bh"]
script/source = "extends CharacterBody3D


const WHEEL_SEPARATION := 0.3
const MOUSE_SENSITIVITY := 0.3
const SPEED := 0.5
const CONN_DELAY := 0.06

var conn: StreamPeerTCP

var conn_timer := CONN_DELAY

var waypoint: Vector2
var waypoint_provided := false
var send_waypoint := false
var user_velocity: Vector3
var ang_vel: Quaternion

@onready var scanner: RayScanner = $RayScanner
@onready var waypoint_mesh: Node3D = $Node/Waypoint
@onready var estimated_mesh: Node3D = $Node/Estimated
@onready var sim_tab: Control = $\"../../../../..\"
@onready var last_quat := quaternion


func _input(event: InputEvent) -> void:
	if !sim_tab.is_visible_in_tree():
		return
	
	if event.is_action_pressed(\"ui_cancel\"):
		Input.mouse_mode = Input.MOUSE_MODE_VISIBLE
		return
	
	if event is InputEventMouseMotion and Input.mouse_mode == Input.MOUSE_MODE_CAPTURED:
		event.relative /= -Vector2(get_viewport().size)
		event.relative = Vector2(sqrt(absf(event.relative.x)), sqrt(absf(event.relative.y))) * event.relative.sign()
		event.relative *= MOUSE_SENSITIVITY
		global_rotate(Vector3.UP, event.relative.x)
		scanner.rotation.x += event.relative.y
		#scanner.rotate_object_local(Vector3.RIGHT, event.relative.y)
	
	elif event.is_action_pressed(\"PlaceWaypoint\"):
		waypoint = Vector2(global_position.x, global_position.z)
		waypoint_provided = true
		waypoint_mesh.visible = true
		waypoint_mesh.global_position.x = global_position.x
		waypoint_mesh.global_position.z = global_position.z
		waypoint_mesh.global_position.y = 0
		return
	
	elif event.is_action_pressed(\"StartNavigation\"):
		send_waypoint = waypoint_provided
		return
	
	elif event.is_action(\"WalkForward\"):
		pass
	elif event.is_action(\"WalkBackwards\"):
		pass
	elif event.is_action(\"WalkLeft\"):
		pass
	elif event.is_action(\"WalkRight\"):
		pass
	else:
		return
	
	Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
	
	user_velocity = global_transform.basis.z * (Input.get_action_strength(\"WalkBackwards\") - Input.get_action_strength(\"WalkForward\")) + global_transform.basis.x * (Input.get_action_strength(\"WalkRight\") - Input.get_action_strength(\"WalkLeft\"))
	user_velocity = user_velocity.slide(Vector3.UP).normalized() * SPEED
	user_velocity += Vector3.DOWN * 9.81
	
	if conn == null:
		conn = StreamPeerTCP.new()
		var err := conn.connect_to_host(\"127.0.0.1\", 11433)
		if err != OK:
			push_error(\"Failed to connect to lunasimbot: %s\" % err)
			conn = null


var left_steering := 0.0
var right_steering := 0.0


func _physics_process(delta: float) -> void:
	velocity = user_velocity
	ang_vel = last_quat.inverse() * quaternion
	if ang_vel.get_axis().is_normalized():
		ang_vel = Quaternion(ang_vel.get_axis(), ang_vel.get_angle() / delta)
	else:
		ang_vel = Quaternion()
	last_quat = quaternion
	if conn != null:
		conn.poll()
	
	if conn_timer > 0.0:
		conn_timer -= delta
	else:
		conn_timer = CONN_DELAY
		if conn != null and conn.get_status() == StreamPeerTCP.STATUS_CONNECTED:
			conn.put_float(global_position.x)
			conn.put_float(global_position.y)
			conn.put_float(global_position.z)
			var vel := user_velocity + Vector3.UP * 9.81
			conn.put_float(vel.x)
			conn.put_float(vel.y)
			conn.put_float(vel.z)
			conn.put_float(quaternion.w)
			conn.put_float(quaternion.x)
			conn.put_float(quaternion.y)
			conn.put_float(quaternion.z)
			conn.put_float(ang_vel.w)
			conn.put_float(ang_vel.x)
			conn.put_float(ang_vel.y)
			conn.put_float(ang_vel.z)
			conn.put_float(scanner.rotation.x)
			var points := scanner.scan()
			conn.put_u32(points.size())
			for point in points:
				conn.put_float(point.x)
				conn.put_float(point.y)
				conn.put_float(point.z)
			if send_waypoint:
				conn.put_8(255)
				conn.put_float(waypoint.x)
				conn.put_float(waypoint.y)
				send_waypoint = false
			else:
				conn.put_8(0)
			
			left_steering = conn.get_float()
			right_steering = conn.get_float()
			
			estimated_mesh.global_position = Vector3(conn.get_float(), conn.get_float(), conn.get_float())
			var w := conn.get_float()
			estimated_mesh.quaternion = Quaternion(conn.get_float(), conn.get_float(), conn.get_float(), w)
	
	velocity += - global_transform.basis.z.slide(Vector3.UP).normalized() * SPEED * (left_steering + right_steering) / 2
	var angle := (left_steering - right_steering) * SPEED / WHEEL_SEPARATION
	global_rotate(Vector3.UP, - angle * delta)
	#prints(left_steering, right_steering)
	
	move_and_slide()
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_u861d"]
height = 1.0

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_mw3v4"]
albedo_color = Color(0.101961, 0.537255, 0.101961, 1)

[sub_resource type="PrismMesh" id="PrismMesh_6d518"]
material = SubResource("StandardMaterial3D_mw3v4")
size = Vector3(0.05, 0.05, 0.35)

[sub_resource type="PrismMesh" id="PrismMesh_cfju8"]
material = SubResource("StandardMaterial3D_mw3v4")
size = Vector3(0.05, 0.05, 0.35)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_s2y08"]
transparency = 1
shading_mode = 0
albedo_color = Color(1, 0.164706, 0.215686, 0.372549)

[sub_resource type="CapsuleMesh" id="CapsuleMesh_jrghj"]
material = SubResource("StandardMaterial3D_s2y08")
height = 1.0

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_vyevn"]
albedo_color = Color(1, 0, 0.65098, 1)

[sub_resource type="SphereMesh" id="SphereMesh_g5hor"]
material = SubResource("StandardMaterial3D_vyevn")
radius = 0.05
height = 0.1

[sub_resource type="CylinderMesh" id="CylinderMesh_hn2h0"]
material = SubResource("StandardMaterial3D_vyevn")
top_radius = 0.01
bottom_radius = 0.03
height = 0.1

[sub_resource type="WorldBoundaryShape3D" id="WorldBoundaryShape3D_yqe5l"]

[node name="Main" type="TabContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 10.0
offset_top = 10.0
offset_right = -10.0
offset_bottom = -10.0
grow_horizontal = 2
grow_vertical = 2
theme_override_styles/panel = SubResource("StyleBoxEmpty_f0mli")
script = SubResource("GDScript_45865")

[node name="Controller" type="HSplitContainer" parent="."]
layout_mode = 2
theme_override_constants/autohide = 0
split_offset = 400

[node name="Control" type="Control" parent="Controller"]
layout_mode = 2

[node name="VBoxContainer3" type="VBoxContainer" parent="Controller/Control"]
layout_mode = 1
anchors_preset = -1
anchor_right = 1.0
offset_left = 10.0
offset_top = 10.0

[node name="ImportantData" type="Label" parent="Controller/Control/VBoxContainer3"]
layout_mode = 2
size_flags_horizontal = 0
text = "Not Connected"
script = SubResource("GDScript_wemvy")

[node name="LastReceived" type="Label" parent="Controller/Control/VBoxContainer3"]
modulate = Color(0, 1, 0, 1)
layout_mode = 2
size_flags_horizontal = 0
text = "Last Received:"
script = SubResource("GDScript_yu1su")

[node name="MarginContainer" type="MarginContainer" parent="Controller"]
layout_mode = 2
theme_override_constants/margin_left = 5
theme_override_constants/margin_top = 10
theme_override_constants/margin_right = 10
theme_override_constants/margin_bottom = 10

[node name="VBoxContainer" type="VBoxContainer" parent="Controller/MarginContainer"]
layout_mode = 2

[node name="VBoxContainer2" type="VBoxContainer" parent="Controller/MarginContainer/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3
alignment = 1

[node name="Camera" type="TextureRect" parent="Controller/MarginContainer/VBoxContainer/VBoxContainer2"]
layout_mode = 2
expand_mode = 5
script = SubResource("GDScript_67ds2")

[node name="HBoxContainer" type="HBoxContainer" parent="Controller/MarginContainer/VBoxContainer"]
layout_mode = 2
alignment = 1

[node name="EnableCamera" type="Button" parent="Controller/MarginContainer/VBoxContainer/HBoxContainer"]
layout_mode = 2
disabled = true
text = "Enable Camera"
script = SubResource("GDScript_amk46")

[node name="VBoxContainer" type="VBoxContainer" parent="Controller/MarginContainer/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3
alignment = 2

[node name="AspectRatioContainer" type="AspectRatioContainer" parent="Controller/MarginContainer/VBoxContainer/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3
alignment_vertical = 2

[node name="TextureRect" type="TextureRect" parent="Controller/MarginContainer/VBoxContainer/VBoxContainer/AspectRatioContainer"]
layout_mode = 2
mouse_filter = 0
texture = SubResource("GradientTexture2D_lspd7")
script = SubResource("GDScript_aogjq")

[node name="CenterContainer" type="CenterContainer" parent="Controller/MarginContainer/VBoxContainer/VBoxContainer/AspectRatioContainer/TextureRect"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Label" type="Label" parent="Controller/MarginContainer/VBoxContainer/VBoxContainer/AspectRatioContainer/TextureRect/CenterContainer"]
layout_mode = 2
text = "Click to Drive"

[node name="3D Player" type="VBoxContainer" parent="."]
visible = false
layout_mode = 2
script = SubResource("GDScript_ggpmf")

[node name="AspectRatioContainer" type="AspectRatioContainer" parent="3D Player"]
layout_mode = 2
size_flags_vertical = 3
ratio = 1.8

[node name="SubViewportContainer" type="SubViewportContainer" parent="3D Player/AspectRatioContainer"]
layout_mode = 2
stretch = true
script = SubResource("GDScript_mnw3m")

[node name="SubViewport" type="SubViewport" parent="3D Player/AspectRatioContainer/SubViewportContainer"]
world_3d = SubResource("World3D_pep74")
handle_input_locally = false
msaa_3d = 1
size = Vector2i(2, 2)
render_target_update_mode = 0

[node name="Robot" type="MeshInstance3D" parent="3D Player/AspectRatioContainer/SubViewportContainer/SubViewport"]
rotation_edit_mode = 1
top_level = true
mesh = SubResource("BoxMesh_0laka")

[node name="RemoteTransform3D" type="RemoteTransform3D" parent="3D Player/AspectRatioContainer/SubViewportContainer/SubViewport/Robot"]
remote_path = NodePath("../../Node3D")
update_rotation = false
update_scale = false

[node name="MeshInstance3D" type="MeshInstance3D" parent="3D Player/AspectRatioContainer/SubViewportContainer/SubViewport/Robot"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.148285)
mesh = SubResource("PrismMesh_8ty6s")

[node name="Node3D" type="Node3D" parent="3D Player/AspectRatioContainer/SubViewportContainer/SubViewport"]
transform = Transform3D(0.747033, -0.309606, 0.588291, 0, 0.884931, 0.465723, -0.664787, -0.34791, 0.661072, 0, 0, 0)

[node name="Camera3D" type="Camera3D" parent="3D Player/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1.202)

[node name="MeshInstance3D" type="MeshInstance3D" parent="3D Player/AspectRatioContainer/SubViewportContainer/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.5, 0)
layers = 2
mesh = SubResource("PlaneMesh_hrbaw")

[node name="Decal" type="Decal" parent="3D Player/AspectRatioContainer/SubViewportContainer/SubViewport/MeshInstance3D"]
size = Vector3(15, 1, 15)
texture_albedo = ExtResource("1_1xyvq")
cull_mask = 1048574

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="3D Player/AspectRatioContainer/SubViewportContainer/SubViewport"]
transform = Transform3D(0.243107, -0.860673, 0.44737, 3.6215e-11, 0.461207, 0.887293, -0.969999, -0.215707, 0.112123, 0, 1.80059, 0)
shadow_enabled = true
directional_shadow_mode = 1

[node name="WorldEnvironment" type="WorldEnvironment" parent="3D Player/AspectRatioContainer/SubViewportContainer/SubViewport"]
environment = SubResource("Environment_bvywr")

[node name="Origin" type="Node3D" parent="3D Player/AspectRatioContainer/SubViewportContainer/SubViewport"]

[node name="MeshInstance3D2" type="MeshInstance3D" parent="3D Player/AspectRatioContainer/SubViewportContainer/SubViewport/Origin"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.05, 0)
mesh = SubResource("CylinderMesh_ounod")
skeleton = NodePath("../..")

[node name="MeshInstance3D3" type="MeshInstance3D" parent="3D Player/AspectRatioContainer/SubViewportContainer/SubViewport/Origin"]
transform = Transform3D(-4.37114e-08, 1, 4.37114e-08, 0, -4.37114e-08, 1, 1, 4.37114e-08, 1.91069e-15, 0.05, 0, 0)
mesh = SubResource("CylinderMesh_7c1fb")
skeleton = NodePath("../..")

[node name="MeshInstance3D4" type="MeshInstance3D" parent="3D Player/AspectRatioContainer/SubViewportContainer/SubViewport/Origin"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0.05)
mesh = SubResource("CylinderMesh_826py")
skeleton = NodePath("../..")

[node name="HBoxContainer" type="HBoxContainer" parent="3D Player"]
layout_mode = 2
theme_override_constants/separation = 15

[node name="Button" type="Button" parent="3D Player/HBoxContainer"]
layout_mode = 2
text = "Open File"

[node name="Label" type="Label" parent="3D Player/HBoxContainer"]
layout_mode = 2

[node name="HBoxContainer2" type="HBoxContainer" parent="3D Player"]
layout_mode = 2

[node name="Play" type="Button" parent="3D Player/HBoxContainer2"]
layout_mode = 2
disabled = true
toggle_mode = true
text = "Play"

[node name="PlayTime" type="LineEdit" parent="3D Player/HBoxContainer2"]
layout_mode = 2
text = "0:00"
editable = false

[node name="HSlider" type="HSlider" parent="3D Player/HBoxContainer2"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 4
max_value = 1.0
step = 0.001
editable = false

[node name="Sim" type="VBoxContainer" parent="."]
visible = false
layout_mode = 2

[node name="AspectRatioContainer" type="AspectRatioContainer" parent="Sim"]
layout_mode = 2
size_flags_vertical = 3
ratio = 1.8

[node name="SubViewportContainer" type="SubViewportContainer" parent="Sim/AspectRatioContainer"]
layout_mode = 2
stretch = true

[node name="SubViewport" type="SubViewport" parent="Sim/AspectRatioContainer/SubViewportContainer"]
handle_input_locally = false
msaa_3d = 1
size = Vector2i(2, 2)
render_target_update_mode = 0

[node name="Node3D" type="Node3D" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport"]

[node name="CharacterBody3D" type="CharacterBody3D" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D"]
script = SubResource("GDScript_0y6bh")

[node name="CollisionShape3D" type="CollisionShape3D" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/CharacterBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)
shape = SubResource("CapsuleShape3D_u861d")

[node name="RayScanner" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/CharacterBody3D" instance=ExtResource("2_jsa7e")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)

[node name="Center" type="Node3D" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/CharacterBody3D"]

[node name="Waypoint" type="MeshInstance3D" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/CharacterBody3D/Center"]
transform = Transform3D(0, 0, 1, 0, 1, 0, -1, 0, 0, 0, 0, 0)
mesh = SubResource("PrismMesh_6d518")

[node name="Waypoint2" type="MeshInstance3D" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/CharacterBody3D/Center"]
transform = Transform3D(-1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0)
mesh = SubResource("PrismMesh_cfju8")

[node name="Node" type="Node" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/CharacterBody3D"]

[node name="Waypoint" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/CharacterBody3D/Node" instance=ExtResource("3_b4xjj")]
visible = false

[node name="Estimated" type="Node3D" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/CharacterBody3D/Node"]

[node name="MeshInstance3D" type="MeshInstance3D" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/CharacterBody3D/Node/Estimated"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)
mesh = SubResource("CapsuleMesh_jrghj")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/CharacterBody3D/Node/Estimated"]
mesh = SubResource("SphereMesh_g5hor")

[node name="MeshInstance3D3" type="MeshInstance3D" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/CharacterBody3D/Node/Estimated"]
transform = Transform3D(1, 0, 0, 0, 1.31134e-07, 1, 0, -1, 1.31134e-07, 0, 0, -0.0902355)
mesh = SubResource("CylinderMesh_hn2h0")

[node name="MeshInstance3D" type="MeshInstance3D" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D"]
layers = 2
mesh = SubResource("PlaneMesh_hrbaw")

[node name="Decal" type="Decal" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/MeshInstance3D"]
size = Vector3(15, 1, 15)
texture_albedo = ExtResource("1_1xyvq")
cull_mask = 1048574

[node name="StaticBody3D" type="StaticBody3D" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/MeshInstance3D"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/MeshInstance3D/StaticBody3D"]
shape = SubResource("WorldBoundaryShape3D_yqe5l")

[node name="Boulder" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/MeshInstance3D" instance=ExtResource("3_02f7a")]

[node name="Boulder2" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/MeshInstance3D" instance=ExtResource("3_02f7a")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -3.13333, -0.296974, -0.871875)

[node name="Boulder3" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/MeshInstance3D" instance=ExtResource("3_02f7a")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.42865, -0.424198, 2.11976)

[node name="Boulder4" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D/MeshInstance3D" instance=ExtResource("3_02f7a")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -1.30077, -0.203136, 2.17333)

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D"]
transform = Transform3D(0.243107, -0.860673, 0.44737, 3.6215e-11, 0.461207, 0.887293, -0.969999, -0.215707, 0.112123, 0, 1.80059, 0)
shadow_enabled = true
directional_shadow_mode = 1

[node name="WorldEnvironment" type="WorldEnvironment" parent="Sim/AspectRatioContainer/SubViewportContainer/SubViewport/Node3D"]
environment = SubResource("Environment_bvywr")

[node name="HBoxContainer" type="HBoxContainer" parent="Sim"]
layout_mode = 2
theme_override_constants/separation = 15

[node name="Label" type="Label" parent="Sim/HBoxContainer"]
layout_mode = 2
text = "Not Connected
"

[node name="Disconnected" type="AudioStreamPlayer" parent="."]
stream = ExtResource("2_kejy0")

[node name="Connected" type="AudioStreamPlayer" parent="."]
stream = ExtResource("1_hl7kb")

[connection signal="pressed" from="Controller/MarginContainer/VBoxContainer/HBoxContainer/EnableCamera" to="Controller/MarginContainer/VBoxContainer/HBoxContainer/EnableCamera" method="_on_pressed"]
[connection signal="mouse_exited" from="Controller/MarginContainer/VBoxContainer/VBoxContainer/AspectRatioContainer/TextureRect" to="Controller/MarginContainer/VBoxContainer/VBoxContainer/AspectRatioContainer/TextureRect" method="_on_mouse_exited"]
[connection signal="pressed" from="3D Player/HBoxContainer/Button" to="3D Player" method="_on_open_file_pressed"]
[connection signal="toggled" from="3D Player/HBoxContainer2/Play" to="3D Player" method="_on_play_toggled"]
